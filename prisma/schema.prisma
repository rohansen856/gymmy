generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  role            String    @default("member")
  joinDate        DateTime  @default(now())
  membershipType  String    @default("basic")
  membershipStatus String   @default("active")
  phoneNumber     String?
  fitnessLevel    String?
  
  profile         Profile?
  accounts        Account[]
  sessions        Session[]
  bookings        Booking[]
  personalBests   PersonalBest[]
  healthMetrics   HealthMetrics?
}

model HealthMetrics {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @unique @db.ObjectId
  weight            Float
  height            Float
  bodyFatPercentage Float?
  bmi               Float?
  restingHeartRate  Int?
  lastUpdated       DateTime @default(now())
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PersonalBest {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  exerciseType String
  value        Float
  unit         String
  date         DateTime @default(now())
  verified     Boolean  @default(false)
  notes        String?
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Equipment {
  equipmentId     String   @id @default(auto()) @map("_id") @db.ObjectId
  id              String   @unique
  name            String
  category        String
  description     String
  location        String
  status          String   @default("available")
  image           String?
  purchaseDate    DateTime @default(now())
  lastServiced    DateTime?
  manufacturer    String?
  model           String?
  serialNumber    String?
  bookable        Boolean  @default(true)
  
  bookings        Booking[]
  maintenanceLogs MaintenanceLog[]
}

model MaintenanceLog {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  equipmentId  String   @db.ObjectId
  date         DateTime @default(now())
  description  String
  technician   String
  cost         Float?
  notes        String?
  
  equipment    Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
}

model Booking {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  equipmentId String   @db.ObjectId
  startTime   DateTime
  endTime     DateTime
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  notes       String?
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
}

model Event {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  description        String
  type               String
  startDate          DateTime
  endDate            DateTime
  location           String
  maxParticipants    Int?
  currentParticipants Int     @default(0)
  image              String?
  registrationDeadline DateTime?
  status             String   @default("upcoming")
  
  participants       EventParticipant[]
  results           EventResult[]
}

model EventParticipant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  eventId   String   @db.ObjectId
  userId    String   @db.ObjectId
  joinedAt  DateTime @default(now())
  
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model EventResult {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  eventId   String   @db.ObjectId
  userId    String   @db.ObjectId
  rank      Int
  score     Float
  notes     String?
  
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  userId          String @unique @db.ObjectId
  name            String
  age             Int
  gender          String
  weight          Int
  height          Int
  bmi             Int
  bloodPressure   String

  User            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}